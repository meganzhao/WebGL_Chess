Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	varying vec2 texCoord; 
	uniform vec4 lightPos[1]; // xyz is the direction, w is 0
	uniform vec4 lightPowerDensity[1]; // w ignored
	uniform vec4 mainDir;
	uniform sampler2D probeTexture;
	uniform vec3 cameraPosition;

	varying vec4 worldPos;
	varying vec3 worldNormal;
	varying vec4 rayDir;
	//update #
	const int quadricsObjects = 15;

	uniform mat4 quadrics[quadricsObjects * 3];
	uniform vec4 brdfs[quadricsObjects];
	

	float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d){
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float discriminant = b * b - 4.0 * a * c;
		if (discriminant < 0.0){
		 	return -1.0;
		}
		float t1 = (-b + sqrt(discriminant)) / (2.0 * a);
		float t2 = (-b - sqrt(discriminant)) / (2.0 * a);
		vec4 hit1 = e + d * t1;
		vec4 hit2 = e + d * t2;
		if (dot(hit1 * B, hit1) > 0.0){
			t1 = -1.0;
		}
		if (dot(hit2 * B, hit2) > 0.0){
			t2 = -1.0;
		}
		if (t1 < t2 && t1 > 0.0 || t2 < 0.0){
			return t1;
		} else {
			return t2;
		}
	}

	float intersectClippedQuadric(mat4 A, mat4 B, mat4 C, vec4 e, vec4 d){
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float discriminant = b * b - 4.0 * a * c;
		if (discriminant < 0.0){
		 	return -1.0;
		}
		float t1 = (-b + sqrt(discriminant)) / (2.0 * a);
		float t2 = (-b - sqrt(discriminant)) / (2.0 * a);
		vec4 hit1 = e + d * t1;
		vec4 hit2 = e + d * t2;
		if (dot(hit1 * B, hit1) > 0.0 || dot(hit1 * C, hit1) > 0.0){
			t1 = -1.0;
		}
		if (dot(hit2 * B, hit2) > 0.0 || dot(hit2 * C, hit2) > 0.0){
			t2 = -1.0;
		}
		if (t1 < t2 && t1 > 0.0 || t2 < 0.0){
			return t1;
		} else {
			return t2;
		}
	}

	bool findBestHit(vec4 e, vec4 d, out float bestT, out vec4 bestBrdf, out mat4 bestA){
		bestT = -1.0;
		bestBrdf = brdfs[0];
		bestA = quadrics[0];
		
		//chessboard box
		float currentT = intersectClippedQuadric(quadrics[0], quadrics[1], quadrics[2], e, d);
		if(currentT > bestT){
			bestT = currentT;
			bestBrdf = brdfs[0];
			bestA = quadrics[0];
		}
		currentT = intersectClippedQuadric(quadrics[1], quadrics[2], quadrics[0], e, d);
		if(currentT > bestT){
			bestT = currentT;
			bestBrdf = brdfs[0];
			bestA = quadrics[1];
		}
		currentT = intersectClippedQuadric(quadrics[2], quadrics[0], quadrics[1], e, d);
		if(currentT > bestT){
			bestT = currentT;
			bestBrdf = brdfs[0];
			bestA = quadrics[2];
		}

		for (int i = 3; i < quadricsObjects * 3; i += 3){
			float currentT = intersectClippedQuadric(quadrics[i], quadrics[i+1], e, d);
			if(currentT > bestT){
				bestT = currentT;
				bestBrdf = brdfs[(i-3)/3+1];
				bestA = quadrics[i];
			}
		}
		return (bestT != -1.0);
	}

	vec4 boardColor(vec4 position){
		float row = floor(position.x * 4.0);
		float column = floor(position.z * 4.0);
		if (mod(row + column, 2.0) == 0.0){
			return vec4(1,1,0,1);
		} else{
			return vec4(0,1,1,1);
		}
	}


	void main(void) {

		//vec3 viewDir = normalize(cameraPosition - worldPos.xyz);
		// compute ideal reflected direction 
		//vec3 reflDir = reflect(-viewDir, worldNormal);
		//find corresponding point in light probe
		vec3 m = normalize(normalize(rayDir.xyz) + vec3(0,0,1));
		vec2 probeTex = vec2(m.x / 2.0 + 0.5, -m.y / 2.0 + 0.5);
		
		vec4 e = vec4(cameraPosition,1);
		vec4 d = vec4(normalize(rayDir.xyz),0);

		float bestT; vec4 bestBrdf; mat4 bestA;
		bool intersect = findBestHit(e, d, bestT, bestBrdf, bestA);

		if (!intersect){
			gl_FragColor = texture2D(probeTexture, probeTex);
		} else {
			vec4 intersectPoint = e + d * bestT;
		  	vec3 quadricNormal = normalize((bestA * intersectPoint + intersectPoint * bestA).xyz);
			//gl_FragColor = vec4(bestBrdf, 1);
			
			//gl_FragColor = boardColor(intersectPoint);
			if (bestBrdf == brdfs[0]){
				bestBrdf = boardColor(intersectPoint);
			}

			vec3 color = vec3(0,0,0);

			for (int i = 0; i < 1; i++){

				vec3 lightDiff = lightPos[i].xyz - intersectPoint.xyz * lightPos[i].w;
				vec3 viewDiff = cameraPosition - intersectPoint.xyz;
				vec3 halfwayVector = normalize(viewDiff) + normalize(lightDiff * (-1.0));

				vec3 powerDensity;
				if (lightPos[i].w == 1.0){
					powerDensity = lightPowerDensity[i].xyz * pow(max(0.0,dot(normalize(mainDir.xyz),normalize((-1.0) * lightDiff))), 5.0);
				} else{
					powerDensity = lightPowerDensity[i].xyz;
				}

				float cosTheta = max(dot(normalize(lightDiff), normalize(quadricNormal)),0.0);
				vec3 diffuseLight = powerDensity / pow(length(lightDiff), 2.0) * 
					bestBrdf.xyz * cosTheta;

				float shininess = 3.0;
				float specularLightWeight = pow(max(0.0, dot(normalize(quadricNormal),halfwayVector)),shininess);
				vec3 specularLight = bestBrdf.xyz * specularLightWeight;

				color += diffuseLight + specularLight;
			}

			gl_FragColor = vec4(color,1);

			}

	}

`;		
		